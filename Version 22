# Date: 21/05/2024
# Author: Jerry Li
# Purpose: To create a Gui Interface to help Julie to keep a track of items that are currently hired. 

from tkinter import *               
from tkinter import ttk               
# Importing messagebox for warning and information messages
import tkinter.messagebox as messagebox  
 # Importing random for generating random receipt numbers
import random                        


# Creating the main window
root = Tk() 
# Define counts of total entry and name count
counters = {'total_entries': 0, 'name_count': 0}
# define list to store hired item details
Hired_details = [] 

# Creating a quit function to close the program
def quit():
    root.destroy()

    
# Save details into a file for every append detail
def save_Hired_details():
    with open("Hired_details.txt", "w") as file:
        for detail in Hired_details:  
            file.write(f"{detail[0]} {detail[1]}, {detail[2]}, {detail[3]}, {detail[4]}\n")  
    print("Hired details have been saved successfully.")
    messagebox.showinfo("Success", "Hired details have been saved to Hired_details.txt.")  

# Set up a background function so background can be added to every window
def set_background_image(window, image_path):
    bg_image = PhotoImage(file=image_path)  
    bg_label = Label(window, image=bg_image)  
    bg_label.place(relwidth=1, relheight=1)  
    window.bg_image = bg_image  
 

# Print out the information from the append detail
def print_Hired_details():
    # Creating a new window to show the hired details
    global detail_window
    try:
        # Close any existing detail window
        detail_window.destroy()  
    except:
        pass
    
    # Setting up the new window, size, image and title
    detail_window = Toplevel(root)  
    detail_window.title("All the items hired Details")
    detail_window.geometry("400x300")
    set_background_image(detail_window, "image.png")

    # Adding frame to help to locate the labels and buttons
    main_frame = Frame(detail_window)  
    main_frame.pack(side=TOP, fill=BOTH, expand=True)

    bottom_frame = Frame(detail_window) 
    bottom_frame.pack(side=BOTTOM, fill=X)

    counters = {'total_entries': 0, 'name_count': 0} 
    name_count = 0
    # Setting up Labels for the headers
    Label(main_frame,
          font=("Helvetica", 12, "bold"),
          text="Name").grid(column=1, row=0, padx=5, pady=5)
    Label(main_frame,
          font=("Helvetica", 12, "bold"),
          text="Last Name").grid(column=2, row=0, padx=5, pady=5)
    Label(main_frame,
          font=("Helvetica", 12, "bold"),
          text="Items Hired").grid(column=3, row=0, padx=5, pady=5)
    Label(main_frame,
          font=("Helvetica", 12, "bold"),
          text="Number of items").grid(column=4, row=0, padx=5, pady=5)
    Label(main_frame,
          font=("Helvetica", 12, "bold"),
          text="Receipt #").grid(column=5, row=0, padx=5, pady=5)

    for name_count, item in enumerate(Hired_details):
        Label(main_frame,
              text=item[0]).grid(column=1, row=name_count + 1, padx=5, pady=5)
        Label(main_frame,
              text=item[1]).grid(column=2, row=name_count + 1, padx=5, pady=5)
        Label(main_frame,
              text=item[2]).grid(column=3, row=name_count + 1, padx=5, pady=5)
        Label(main_frame,
              text=item[3]).grid(column=4, row=name_count + 1, padx=5, pady=5)
        Label(main_frame,
              text=item[4]).grid(column=5, row=name_count + 1, padx=5, pady=5)
    counters['name_count'] = name_count
    
    # Creaing a back button to return to the main page
    Button(bottom_frame, text="Back", command=close_detail_window).pack(pady=10)

# Adding valiate input to restrict that only alphabets are avliable
def validate_input(char):
    return char.isalpha()

# Adding validate integer to restrict that only integers are avaliable
def validate_integer(char):
    return char.isdigit()

# Check for all the inputs, show error messages if inavaliable
def check_inputs():
    # Creating a list to collect the error messages
    error_messages = [] 
    if len(entry_name.get()) == 0:
        error_messages.append("• First Name cannot be blank!")

    if len(entry_last_name.get()) == 0:
        error_messages.append("• Last Name cannot be blank!")

    if len(entry_Hired_items.get()) == 0:
        error_messages.append("• Hired Item cannot be blank!")

    if not entry_items_number.get().isdigit():
        error_messages.append("• Item number must be an integer!")
    else:
        item_number = int(entry_items_number.get())
        if item_number == 0:
            error_messages.append("• Item number cannot be 0!")
        elif item_number > 500:
            error_messages.append("• Item numnber cannot be over 500")

    # Show warnings if there are errors
    if error_messages:
        # Show all error messages in the same messagebox
        messagebox.showwarning("Warning", "\n".join(error_messages))
    else:
        # Continous to program to append the name if no error
        append_name()

        
# Sumbit all the details
def append_name():
    # Generate a radom recipt number for every append detail
    receipt_number = random.randint(1, 100) 
    Hired_details.append([
        entry_name.get(),
        entry_last_name.get(),
        entry_Hired_items.get(),
        entry_items_number.get(),
        receipt_number
    ])  
    save_Hired_details()  
    entry_name.delete(0, 'end')  
    entry_last_name.delete(0, 'end')
    entry_Hired_items.set('')
    entry_items_number.delete(0, 'end')
    new_window.destroy()  

# Creating a new window for append detail
def open_append_window():
    global new_window, entry_name, entry_last_name, entry_Hired_items, entry_items_number

    # Setting the window, size, image and title
    new_window = Toplevel(root) 
    new_window.title("Append Details")
    new_window.geometry("400x300")
    set_background_image(new_window, "image.png")
    
    # Configure grid columns for spacing
    new_window.grid_columnconfigure(0, weight=1)  
    new_window.grid_columnconfigure(2, weight=1)

    # Create a frame to help locate the lebels and buttons
    frame = Frame(new_window)  
    frame.grid(column=1, row=0, pady=20)

    # Set up the Labels 
    Label(frame, text="First Name").grid(column=0, row=0, sticky=E, pady=5)
    Label(frame, text="Last Name").grid(column=0, row=1, sticky=E, pady=5)
    Label(frame, text="Item Hired").grid(column=0, row=2, sticky=E, pady=5)
    Label(frame, text="Item Number").grid(column=0, row=3, sticky=E, pady=5)


    # Validate input
    validate_name_cmd = root.register(validate_input)
    entry_name = Entry(frame, width=20, validate="key", validatecommand=(validate_name_cmd, "%S"))
    entry_name.grid(column=1, row=0, pady=5)

    # Validate input
    validate_last_name_cmd = root.register(validate_input)
    entry_last_name = Entry(frame, width=20, validate="key", validatecommand=(validate_last_name_cmd, "%S"))
    entry_last_name.grid(column=1, row=1, pady=5)

    # Combobox for selecting hired items
    entry_Hired_items = ttk.Combobox(frame, 
                                     values=["Chairs", "Forks", "Balloons", "Ribbons","Birthday Hat" ],
                                     state="readonly",
                                     width=18)
    entry_Hired_items.grid(column=1, row=2, pady=5)


    # Validate integer
    validate_integer_cmd = root.register(validate_integer)
    entry_items_number = Entry(frame, width=20, validate="key", validatecommand=(validate_integer_cmd, "%S"))
    entry_items_number.grid(column=1, row=3, pady=5)

    # Submit and Back buttons
    Button(frame, text="Submit", command=check_inputs).grid(column=1,
                                                            row=4,
                                                            pady=10)
    Button(frame, text="Back", command=close_new_window).grid(column=1, row=5, pady=10)


# Create a new window to detele the hired detial by receipt number
def open_delete_window():
    global delete_window, delete_item

    # Set up the size, image, window, and title
    delete_window = Toplevel(root)
    delete_window.title("Delete Detail")
    delete_window.geometry("400x300")
    set_background_image(delete_window, "image.png")

    # Configure grid columns for spacing
    delete_window.grid_columnconfigure(0, weight=1)
    delete_window.grid_columnconfigure(1, weight=2)

    # Add a frame to locate the labels and buttons
    frame = Frame(delete_window)
    frame.grid(column=0, row=0, padx=20, pady=20, sticky='nsew')

    # Label for receipt number to delete
    Label(frame, text="Receipt # to delete").grid(column=0, row=0, sticky=E, padx=5, pady=5)

    # Validate integer
    validate_delete_cmd = root.register(validate_integer)
    delete_item = Entry(frame, width=20, validate="key", validatecommand=(validate_delete_cmd, "%S"))
    delete_item.grid(column=1, row=0, padx=5, pady=5)

    # Delete Row and Back buttons
    Button(frame, text="Delete Row", command=delete_row, width=10).grid(column=1, row=1, pady=10, sticky=W)
    Button(frame, text="Back", command=close_delete_window).grid(column=1, row=2, pady=10, sticky=W)


# Delete the detail by recipt number
def delete_row():
    # Add restriction on input
    if not delete_item.get().isdigit():
        messagebox.showwarning("Warning", "Receipt number must be an integer!")  # Show warning if invalid input
        return

    # Get the receipt number
    receipt_to_delete = int(delete_item.get())  
    for i, details in enumerate(Hired_details):
        # Use the provided recipt number to find the hired detail
        if details[4] == receipt_to_delete:
            # Delete the detail
            del Hired_details[i]
            counters['total_entries'] -= 1
            # Clear the entry 
            delete_item.delete(0, 'end')
            # Close the delete window
            delete_window.destroy()
            # Show success message when deleted successfully
            messagebox.showinfo("Success", "Your hired details have been deleted successfully.")  
            return

    # Send error message if no detail was found with the provided receipt number
    messagebox.showwarning("Warning", "No hired details found with the provided receipt number.")  


# Define close function for the back button
def close_new_window():
    new_window.destroy()
    
# Define close function for the back button
def close_detail_window():
    detail_window.destroy()
    
# Define close function for the back button
def close_delete_window():
    delete_window.destroy()

# Sets up the buttons in the main window.
def setup_buttons():
    main_frame = Frame(root)  
    main_frame.pack(expand=True)
    
    # Set up Labels and buttons in the main window
    Label(main_frame, text="Welcome to Julie's Hire Store", font=("Helvetica", 16, "bold")).grid(column=0, row=0, pady=10)
    Button(main_frame, text="Append Detail", command=open_append_window, width=20).grid(column=0, row=1, pady=10)
    Button(main_frame, text="Print Details", command=print_Hired_details, width=20).grid(column=0, row=2, pady=10)
    Button(main_frame, text="Delete Detail", command=open_delete_window, width=20).grid(column=0, row=3, pady=10)
    Button(main_frame, text="Quit", command=quit, width=20).grid(column=0, row=4, pady=10)

# Define main function
def main():
    global bg_image

    # Set the title of the main window
    root.title("Julie's Hire Store")
    # Set the size of the main window
    root.geometry("400x300")

    # Set the background image for the main window
    bg_image = PhotoImage(file="image.png")
    bg_label = Label(root, image=bg_image)
    bg_label.place(relwidth=1, relheight=1)

    # Set up the buttons in the main window
    setup_buttons()
    # Start the main loop
    root.mainloop()  

# Run the main function
main()  
