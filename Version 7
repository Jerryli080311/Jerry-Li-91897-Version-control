# Import tkinter so we can make a GUI
from tkinter import *
from tkinter import ttk  # Import ttk for combobox
import tkinter.messagebox as messagebox  # Import messagebox for showing warnings

root = Tk()

# Ensure the correct path to your image
photo = PhotoImage(file=r"下载.png")
photoimage = photo.subsample(3, 4)


# Quit subroutine
def quit():
    root.destroy()


# Print details
def print_Hired_details():
    name_count = 0
    # Create the column headings
    Label(root, font=("Helvetica", 10, "bold"),
          text="Receipt #").grid(column=0, row=7)
    Label(root, font=("Helvetica", 10, "bold"), text="Name").grid(column=1,
                                                                  row=7)
    Label(root, font=("Helvetica", 10, "bold"),
          text="Item Hired:    ").grid(column=2, row=7)
    Label(root, font=("Helvetica", 10, "bold"),
          text="Item Number: ").grid(column=3, row=7)

    # Add each item in the list into its own row
    while name_count < counters['total_entries']:
        Label(root,
              text=(Hired_details[name_count][2])).grid(column=0,
                                                        row=name_count + 8)
        Label(root,
              text=(Hired_details[name_count][0])).grid(column=1,
                                                        row=name_count + 8)
        Label(root,
              text=(Hired_details[name_count][1])).grid(column=2,
                                                        row=name_count + 8)
        Label(root,
              text=(Hired_details[name_count][3])).grid(column=3,
                                                        row=name_count + 8)
        name_count += 1
    counters['name_count'] = name_count


# Check the inputs are all valid
def check_inputs():
    error_messages = []
    # Check that leader is not blank, set error text if blank
    if len(entry_name.get()) == 0:
        error_messages.append("• Name cannot be blank!")

    # Check that location is not blank, set error text if blank
    if len(entry_Hired_items.get()) == 0:
        error_messages.append("• Hired Item cannot be blank!")

    # Check that item number is a valid integer, set error text if invalid
    if not entry_items_number.get().isdigit():
        error_messages.append("• Item number must be an integer!")
    else:
        item_number = int(entry_items_number.get())
        if item_number == 0:
            error_messages.append("4. Item number cannot be 0!")

    # If there are any error messages, show them in a single message box
    if error_messages:
        messagebox.showwarning("Warning", "\n".join(error_messages))
    else:
        append_name()


# Add the next camper to the list
def append_name():
    # Append each item to its own area of the list
    receipt_number = counters['receipt_number']
    Hired_details.append([
        entry_name.get(),
        entry_Hired_items.get(), receipt_number,
        entry_items_number.get()
    ])
    # Clear the boxes
    entry_name.delete(0, 'end')
    entry_Hired_items.set('')  # Use set() method for combobox
    entry_items_number.delete(0, 'end')
    counters['total_entries'] += 1
    counters['receipt_number'] += 1  # Increment the receipt number


# Delete a row from the list
def delete_row():
    # Find which row is to be deleted and delete it
    receipt_to_delete = int(delete_item.get())
    for i, details in enumerate(Hired_details):
        if details[2] == receipt_to_delete:
            del Hired_details[i]
            counters['total_entries'] -= 1
            break
    delete_item.delete(0, 'end')
    # Clear the last item displayed on the GUI
    name_count = counters['name_count']
    for i in range(4):
        Label(root, text="          ").grid(column=i, row=name_count + 7)
    # Print all the items in the list
    print_Hired_details()


# Create the buttons and labels
def setup_buttons():
    # Create all the empty and default labels, buttons and entry boxes. Put them in the correct grid location
    Label(root, text="Full Name").grid(column=0, row=0, sticky=E)
    Label(root, text="Item Hired").grid(column=0, row=1, sticky=E)
    Button(root, text="Quit", command=quit, width=10).grid(column=4,
                                                           row=0,
                                                           sticky=E)
    Button(root, text="Append Details", command=check_inputs).grid(column=3,
                                                                   row=1)
    Button(root,
           text='Print Me!',
           image=photoimage,
           compound=LEFT,
           command=print_Hired_details).grid(column=3, row=3, columnspan=1)
    Label(root, text="Item Number").grid(column=0, row=2, sticky=E)
    Label(root, text="Receipt # to delete").grid(column=0, row=3, sticky=E)
    Button(root, text="Delete Row", command=delete_row,
           width=10).grid(column=4, row=3, sticky=E)
    Label(root, text="        ").grid(column=2, row=0)


# Start the program running
def main():
    # Set the title of the main window
    root.title("Julie's Hire Store")
    # Start the GUI
    setup_buttons()
    root.mainloop()


# Validate input to ensure only alphabetic characters are entered
def validate_input(char):
    return char.isalpha()


# Validate input to ensure only integers are entered
def validate_integer(char):
    return char.isdigit()


# Create empty list for camp details and empty variable for entries in the list
counters = {'total_entries': 0, 'name_count': 0, 'receipt_number': 1}
Hired_details = []
validate_name_cmd = root.register(validate_input)
entry_name = Entry(root,
                   width=20,
                   validate="key",
                   validatecommand=(validate_name_cmd, "%S"))
entry_name.grid(column=1, row=0)
entry_Hired_items = ttk.Combobox(root,
                                 values=["Chair", "Fork", "Balloons"],
                                 state="readonly",
                                 width=18)  # Combobox for hired items
entry_Hired_items.grid(column=1, row=1)
validate_integer_cmd = root.register(validate_integer)
entry_items_number = Entry(root,
                           width=20,
                           validate="key",
                           validatecommand=(validate_integer_cmd, "%S"))
entry_items_number.grid(column=1, row=2)
delete_item = Entry(root, width=20)
delete_item.grid(column=1, row=3)

main()
