from tkinter import *
from tkinter import messagebox
from tkinter.ttk import Combobox

root = Tk()
root.title("Julies Hire Store")
root.geometry("600x600")

Hired_details = []
counters = {
    'total_entries': 0,
    'receipt_number': 1,
    'name_count': 0
}


def quit():
    root.destroy()

def print_Hired_details():
    global detail_window
    try:
        detail_window.destroy()
    except:
        pass

    detail_window = Toplevel(root)
    detail_window.title("All the items hired Details")
    detail_window.geometry("600x600")

    Label(detail_window, text="Name", font=("Helvetica", 12, "bold")).grid(column=1, row=0, padx=5, pady=5)
    Label(detail_window, text="Items Hired Name", font=("Helvetica", 12, "bold")).grid(column=2, row=0, padx=5, pady=5)
    Label(detail_window, text="Total number of items hired", font=("Helvetica", 12, "bold")).grid(column=3, row=0, padx=5, pady=5)
    Label(detail_window, text="Receipt Number", font=("Helvetica", 12, "bold")).grid(column=4, row=0, padx=5, pady=5)

    for name_count, item in enumerate(Hired_details):
        Label(detail_window, text=item[0], font=("Helvetica", 10)).grid(column=1, row=name_count+1, padx=5, pady=5)
        Label(detail_window, text=item[1], font=("Helvetica", 10)).grid(column=2, row=name_count+1, padx=5, pady=5)
        Label(detail_window, text=item[2], font=("Helvetica", 10)).grid(column=3, row=name_count+1, padx=5, pady=5)
        Label(detail_window, text=item[3], font=("Helvetica", 10)).grid(column=4, row=name_count+1, padx=5, pady=5)
    counters['name_count'] = name_count


def check_inputs():
    error_messages = []

    if len(entry_name.get()) == 0:
        error_messages.append("• Name cannot be blank!")

    if len(entry_Hired_items.get()) == 0:
        error_messages.append("• Hired Item cannot be blank!")

    if not entry_items_number.get().isdigit():
        error_messages.append("• Item number must be an integer!")
    else:
        item_number = int(entry_items_number.get())
        if item_number == 0:
            error_messages.append("• Item number cannot be 0!")

    if error_messages:
        messagebox.showwarning("Warning", "\n".join(error_messages))
    else:
        append_name()


def append_name():
    receipt_number = counters['receipt_number']
    Hired_details.append([entry_name.get(), entry_Hired_items.get(), receipt_number, entry_items_number.get()])
    entry_name.delete(0, 'end')
    entry_Hired_items.set('')
    entry_items_number.delete(0, 'end')
    counters['total_entries'] += 1
    counters['receipt_number'] += 1

def delete_item(receipt_number):
    global delete_window
    for i, item in enumerate(Hired_details):
        if item[2] == int(receipt_number):
            del Hired_details[i]
            counters['total_entries'] -= 1
            messagebox.showinfo("Info", "Item with receipt number {} deleted.".format(receipt_number))
            delete_window.destroy()
            return
    messagebox.showwarning("Warning", "Receipt number not found.")
    delete_window.destroy()

def delete_by_receipt():
    global delete_window
    try:
        delete_window.destroy()
    except:
        pass

    delete_window = Toplevel(root)
    delete_window.title("Delete item by receipt number")
    delete_window.geometry("250x100")

    Label(delete_window, text="Enter Receipt Number:").pack()
    receipt_entry = Entry(delete_window)
    receipt_entry.pack()
    Button(delete_window, text="Delete", command=lambda: delete_item(receipt_entry.get())).pack()

def validate_input(char):
    return char.isalpha()


def validate_integer(char):
    return char.isdigit()


entry_name = Entry(root, validate="key", validatecommand=(validate_name_cmd, "%S"))
entry_name.grid(row=1, column=1)


validate_integer_cmd = root.register(validate_integer)
entry_Hired_items = Combobox(root, values=["Item1", "Item2", "Item3"])
entry_Hired_items.grid(row=2, column=1)


entry_items_number = Entry(root, validate="key", validatecommand=(validate_integer_cmd, "%S"))
entry_items_number.grid(row=3, column=1)

def setup_buttons():
Label(root, text="Julies Hire Store", font=("Helvetica", 16, "bold")).grid(row=0, column=1, columnspan=2, pady=10)
Label(root, text="Full Name:").grid(row=1, column=0, sticky=E)
Label(root, text="Item Hired:").grid(row=2, column=0, sticky=E)
Label(root, text="Item Number:").grid(row=3, column=0, sticky=E)
Button(root, text="Add Hired Item", command=check_inputs).grid(row=4, column=0, columnspan=2, pady=10)
Button(root, text="Print Hired Details", command=print_Hired_details).grid(row=5, column=0, columnspan=2, pady=10)
Button(root, text="Delete by Receipt", command=delete_by_receipt).grid(row=6, column=0, columnspan=2, pady=10)
Button(root, text="Quit", command=quit).grid(row=7, column=0, columnspan=2, pady=10)

root.mainloop()
